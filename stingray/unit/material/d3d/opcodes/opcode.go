package d3dops

import (
	"encoding/binary"
	"fmt"
	"io"
	"strconv"
)

type Opcode interface {
	ToGLSL(cbuffers []ConstantBuffer, isg, osg []Element, res []ResourceBinding) string
}

type opcodeNumberType uint8

const (
	internalNumberTypeUnknown opcodeNumberType = iota
	internalNumberTypeInt
	internalNumberTypeUInt
	internalNumberTypeFloat
	internalNumberTypeDouble
	internalNumberTypeBool
)

func (t opcodeNumberType) ToString() string {
	switch t {
	case internalNumberTypeInt:
		return "INT"
	case internalNumberTypeUInt:
		return "UINT"
	case internalNumberTypeDouble:
		return "DOUBLE"
	case internalNumberTypeFloat:
		return "FLOAT"
	case internalNumberTypeBool:
		return "BOOL"
	case internalNumberTypeUnknown:
		return "UNKNOWN"
	}
	return "unknown number type!"
}

func (t opcodeNumberType) Prefix() string {
	switch t {
	case internalNumberTypeInt:
		return "i"
	case internalNumberTypeUInt:
		return "u"
	case internalNumberTypeDouble:
		return "d"
	}
	return ""
}

func (t opcodeNumberType) BitcastToFloat() string {
	switch t {
	case internalNumberTypeInt:
		return "intBitsToFloat"
	case internalNumberTypeUInt:
		return "uintBitsToFloat"
	case internalNumberTypeBool:
		return "float"
	}
	return ""
}

func (t opcodeNumberType) BitcastFromFloat() string {
	switch t {
	case internalNumberTypeInt:
		return "floatBitsToInt"
	case internalNumberTypeUInt:
		return "floatBitsToUint"
	case internalNumberTypeBool:
		return "bool"
	}
	return ""
}

type ShaderOpcodeType uint16

const (
	OPCODE_ADD ShaderOpcodeType = iota
	OPCODE_AND
	OPCODE_BREAK
	OPCODE_BREAKC
	OPCODE_CALL
	OPCODE_CALLC
	OPCODE_CASE
	OPCODE_CONTINUE
	OPCODE_CONTINUEC
	OPCODE_CUT
	OPCODE_DEFAULT
	OPCODE_DERIV_RTX
	OPCODE_DERIV_RTY
	OPCODE_DISCARD
	OPCODE_DIV
	OPCODE_DP2
	OPCODE_DP3
	OPCODE_DP4
	OPCODE_ELSE
	OPCODE_EMIT
	OPCODE_EMITTHENCUT
	OPCODE_ENDIF
	OPCODE_ENDLOOP
	OPCODE_ENDSWITCH
	OPCODE_EQ
	OPCODE_EXP
	OPCODE_FRC
	OPCODE_FTOI
	OPCODE_FTOU
	OPCODE_GE
	OPCODE_IADD
	OPCODE_IF
	OPCODE_IEQ
	OPCODE_IGE
	OPCODE_ILT
	OPCODE_IMAD
	OPCODE_IMAX
	OPCODE_IMIN
	OPCODE_IMUL
	OPCODE_INE
	OPCODE_INEG
	OPCODE_ISHL
	OPCODE_ISHR
	OPCODE_ITOF
	OPCODE_LABEL
	OPCODE_LD
	OPCODE_LD_MS
	OPCODE_LOG
	OPCODE_LOOP
	OPCODE_LT
	OPCODE_MAD
	OPCODE_MIN
	OPCODE_MAX
	OPCODE_CUSTOMDATA
	OPCODE_MOV
	OPCODE_MOVC
	OPCODE_MUL
	OPCODE_NE
	OPCODE_NOP
	OPCODE_NOT
	OPCODE_OR
	OPCODE_RESINFO
	OPCODE_RET
	OPCODE_RETC
	OPCODE_ROUND_NE
	OPCODE_ROUND_NI
	OPCODE_ROUND_PI
	OPCODE_ROUND_Z
	OPCODE_RSQ
	OPCODE_SAMPLE
	OPCODE_SAMPLE_C
	OPCODE_SAMPLE_C_LZ
	OPCODE_SAMPLE_L
	OPCODE_SAMPLE_D
	OPCODE_SAMPLE_B
	OPCODE_SQRT
	OPCODE_SWITCH
	OPCODE_SINCOS
	OPCODE_UDIV
	OPCODE_ULT
	OPCODE_UGE
	OPCODE_UMUL
	OPCODE_UMAD
	OPCODE_UMAX
	OPCODE_UMIN
	OPCODE_USHR
	OPCODE_UTOF
	OPCODE_XOR
	OPCODE_DCL_RESOURCE        // DCL* opcodes have
	OPCODE_DCL_CONSTANT_BUFFER // custom operand formats.
	OPCODE_DCL_SAMPLER
	OPCODE_DCL_INDEX_RANGE
	OPCODE_DCL_GS_OUTPUT_PRIMITIVE_TOPOLOGY
	OPCODE_DCL_GS_INPUT_PRIMITIVE
	OPCODE_DCL_MAX_OUTPUT_VERTEX_COUNT
	OPCODE_DCL_INPUT
	OPCODE_DCL_INPUT_SGV
	OPCODE_DCL_INPUT_SIV
	OPCODE_DCL_INPUT_PS
	OPCODE_DCL_INPUT_PS_SGV
	OPCODE_DCL_INPUT_PS_SIV
	OPCODE_DCL_OUTPUT
	OPCODE_DCL_OUTPUT_SGV
	OPCODE_DCL_OUTPUT_SIV
	OPCODE_DCL_TEMPS
	OPCODE_DCL_INDEXABLE_TEMP
	OPCODE_DCL_GLOBAL_FLAGS

	// This marks the end of D3D10.0 opcodes
	D3D10_SB_OPCODE_RESERVED0

	// ---------- DX 10.1 op codes---------------------

	OPCODE_10_1_LOD
	OPCODE_10_1_GATHER4
	OPCODE_10_1_SAMPLE_POS
	OPCODE_10_1_SAMPLE_INFO

	// This marks the end of D3D10.1 opcodes
	D3D10_1_SB_OPCODE_RESERVED1

	// ---------- DX 11 op codes---------------------
	OPCODE_11_HS_DECLS               // token marks beginning of HS sub-shader
	OPCODE_11_HS_CONTROL_POINT_PHASE // token marks beginning of HS sub-shader
	OPCODE_11_HS_FORK_PHASE          // token marks beginning of HS sub-shader
	OPCODE_11_HS_JOIN_PHASE          // token marks beginning of HS sub-shader

	OPCODE_11_EMIT_STREAM
	OPCODE_11_CUT_STREAM
	OPCODE_11_EMITTHENCUT_STREAM
	OPCODE_11_INTERFACE_CALL

	OPCODE_11_BUFINFO
	OPCODE_11_DERIV_RTX_COARSE
	OPCODE_11_DERIV_RTX_FINE
	OPCODE_11_DERIV_RTY_COARSE
	OPCODE_11_DERIV_RTY_FINE
	OPCODE_11_GATHER4_C
	OPCODE_11_GATHER4_PO
	OPCODE_11_GATHER4_PO_C
	OPCODE_11_RCP
	OPCODE_11_F32TOF16
	OPCODE_11_F16TOF32
	OPCODE_11_UADDC
	OPCODE_11_USUBB
	OPCODE_11_COUNTBITS
	OPCODE_11_FIRSTBIT_HI
	OPCODE_11_FIRSTBIT_LO
	OPCODE_11_FIRSTBIT_SHI
	OPCODE_11_UBFE
	OPCODE_11_IBFE
	OPCODE_11_BFI
	OPCODE_11_BFREV
	OPCODE_11_SWAPC

	OPCODE_11_DCL_STREAM
	OPCODE_11_DCL_FUNCTION_BODY
	OPCODE_11_DCL_FUNCTION_TABLE
	OPCODE_11_DCL_INTERFACE

	OPCODE_11_DCL_INPUT_CONTROL_POINT_COUNT
	OPCODE_11_DCL_OUTPUT_CONTROL_POINT_COUNT
	OPCODE_11_DCL_TESS_DOMAIN
	OPCODE_11_DCL_TESS_PARTITIONING
	OPCODE_11_DCL_TESS_OUTPUT_PRIMITIVE
	OPCODE_11_DCL_HS_MAX_TESSFACTOR
	OPCODE_11_DCL_HS_FORK_PHASE_INSTANCE_COUNT
	OPCODE_11_DCL_HS_JOIN_PHASE_INSTANCE_COUNT

	OPCODE_11_DCL_THREAD_GROUP
	OPCODE_11_DCL_UNORDERED_ACCESS_VIEW_TYPED
	OPCODE_11_DCL_UNORDERED_ACCESS_VIEW_RAW
	OPCODE_11_DCL_UNORDERED_ACCESS_VIEW_STRUCTURED
	OPCODE_11_DCL_THREAD_GROUP_SHARED_MEMORY_RAW
	OPCODE_11_DCL_THREAD_GROUP_SHARED_MEMORY_STRUCTURED
	OPCODE_11_DCL_RESOURCE_RAW
	OPCODE_11_DCL_RESOURCE_STRUCTURED
	OPCODE_11_LD_UAV_TYPED
	OPCODE_11_STORE_UAV_TYPED
	OPCODE_11_LD_RAW
	OPCODE_11_STORE_RAW
	OPCODE_11_LD_STRUCTURED
	OPCODE_11_STORE_STRUCTURED
	OPCODE_11_ATOMIC_AND
	OPCODE_11_ATOMIC_OR
	OPCODE_11_ATOMIC_XOR
	OPCODE_11_ATOMIC_CMP_STORE
	OPCODE_11_ATOMIC_IADD
	OPCODE_11_ATOMIC_IMAX
	OPCODE_11_ATOMIC_IMIN
	OPCODE_11_ATOMIC_UMAX
	OPCODE_11_ATOMIC_UMIN
	OPCODE_11_IMM_ATOMIC_ALLOC
	OPCODE_11_IMM_ATOMIC_CONSUME
	OPCODE_11_IMM_ATOMIC_IADD
	OPCODE_11_IMM_ATOMIC_AND
	OPCODE_11_IMM_ATOMIC_OR
	OPCODE_11_IMM_ATOMIC_XOR
	OPCODE_11_IMM_ATOMIC_EXCH
	OPCODE_11_IMM_ATOMIC_CMP_EXCH
	OPCODE_11_IMM_ATOMIC_IMAX
	OPCODE_11_IMM_ATOMIC_IMIN
	OPCODE_11_IMM_ATOMIC_UMAX
	OPCODE_11_IMM_ATOMIC_UMIN
	OPCODE_11_SYNC

	OPCODE_11_DADD
	OPCODE_11_DMAX
	OPCODE_11_DMIN
	OPCODE_11_DMUL
	OPCODE_11_DEQ
	OPCODE_11_DGE
	OPCODE_11_DLT
	OPCODE_11_DNE
	OPCODE_11_DMOV
	OPCODE_11_DMOVC
	OPCODE_11_DTOF
	OPCODE_11_FTOD

	OPCODE_11_EVAL_SNAPPED
	OPCODE_11_EVAL_SAMPLE_INDEX
	OPCODE_11_EVAL_CENTROID

	OPCODE_11_DCL_GS_INSTANCE_COUNT

	OPCODE_11_ABORT
	OPCODE_11_DEBUG_BREAK

	// This marks the end of D3D11.0 opcodes
	D3D11_SB_OPCODE_RESERVED0

	OPCODE_11_1_DDIV
	OPCODE_11_1_DFMA
	OPCODE_11_1_DRCP

	OPCODE_11_1_MSAD

	OPCODE_11_1_DTOI
	OPCODE_11_1_DTOU
	OPCODE_11_1_ITOD
	OPCODE_11_1_UTOD

	// This marks the end of D3D11.1 opcodes
	D3D11_1_SB_OPCODE_RESERVED0

	D3DWDDM1_3_SB_OPCODE_GATHER4_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_GATHER4_C_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_GATHER4_PO_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_GATHER4_PO_C_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_LD_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_LD_MS_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_LD_UAV_TYPED_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_LD_RAW_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_LD_STRUCTURED_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_SAMPLE_L_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_SAMPLE_C_LZ_FEEDBACK

	D3DWDDM1_3_SB_OPCODE_SAMPLE_CLAMP_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_SAMPLE_B_CLAMP_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_SAMPLE_D_CLAMP_FEEDBACK
	D3DWDDM1_3_SB_OPCODE_SAMPLE_C_CLAMP_FEEDBACK

	D3DWDDM1_3_SB_OPCODE_CHECK_ACCESS_FULLY_MAPPED

	//----------------------------------------------

	// This marks the end of WDDM 1.3 opcodes
	D3DWDDM1_3_SB_OPCODE_RESERVED0

	D3D10_SB_NUM_OPCODES // Should be the last entry
)

func (t ShaderOpcodeType) NumberType() opcodeNumberType {
	switch t {
	case OPCODE_IADD, OPCODE_IGE, OPCODE_ILT, OPCODE_IMAD, OPCODE_IMAX, OPCODE_IMIN, OPCODE_IMUL, OPCODE_INE, OPCODE_INEG, OPCODE_ISHL, OPCODE_ISHR, OPCODE_11_IBFE, OPCODE_11_ATOMIC_IADD, OPCODE_11_ATOMIC_IMAX, OPCODE_11_ATOMIC_IMIN, OPCODE_11_IMM_ATOMIC_IADD, OPCODE_11_IMM_ATOMIC_IMAX, OPCODE_11_IMM_ATOMIC_IMIN, OPCODE_RESINFO, OPCODE_ITOF:
		return internalNumberTypeInt
	case OPCODE_AND, OPCODE_LD, OPCODE_LD_MS, OPCODE_OR, OPCODE_UDIV, OPCODE_ULT, OPCODE_UGE, OPCODE_UMUL, OPCODE_UMAD, OPCODE_UMAX, OPCODE_UMIN, OPCODE_USHR, OPCODE_XOR, OPCODE_11_UADDC, OPCODE_11_USUBB, OPCODE_11_COUNTBITS, OPCODE_11_FIRSTBIT_HI, OPCODE_11_FIRSTBIT_LO, OPCODE_11_UBFE, OPCODE_11_BFI, OPCODE_11_ATOMIC_AND, OPCODE_11_ATOMIC_OR, OPCODE_11_ATOMIC_XOR, OPCODE_11_ATOMIC_UMAX, OPCODE_11_ATOMIC_UMIN, OPCODE_11_IMM_ATOMIC_AND, OPCODE_11_IMM_ATOMIC_OR, OPCODE_11_IMM_ATOMIC_XOR, OPCODE_11_IMM_ATOMIC_UMAX, OPCODE_11_IMM_ATOMIC_UMIN, OPCODE_UTOF:
		return internalNumberTypeUInt
	case OPCODE_ADD, OPCODE_DIV, OPCODE_DP2, OPCODE_DP3, OPCODE_DP4, OPCODE_EQ, OPCODE_EXP, OPCODE_FRC, OPCODE_GE, OPCODE_LOG, OPCODE_LT, OPCODE_MAD, OPCODE_MIN, OPCODE_MAX, OPCODE_MUL, OPCODE_NE, OPCODE_ROUND_NE, OPCODE_ROUND_NI, OPCODE_ROUND_PI, OPCODE_ROUND_Z, OPCODE_RSQ, OPCODE_SAMPLE, OPCODE_SAMPLE_C, OPCODE_SAMPLE_C_LZ, OPCODE_SAMPLE_L, OPCODE_SAMPLE_D, OPCODE_SAMPLE_B, OPCODE_SQRT, OPCODE_SINCOS, OPCODE_11_F16TOF32, OPCODE_11_F32TOF16, OPCODE_FTOI, OPCODE_FTOU, OPCODE_11_FTOD:
		return internalNumberTypeFloat
	case OPCODE_11_DADD, OPCODE_11_DMAX, OPCODE_11_DMIN, OPCODE_11_DMUL, OPCODE_11_DEQ, OPCODE_11_DGE, OPCODE_11_DLT, OPCODE_11_DNE, OPCODE_11_DMOV, OPCODE_11_DMOVC:
		return internalNumberTypeDouble
	default:
		return internalNumberTypeUnknown
	}
}

func (t ShaderOpcodeType) ReturnNumberType() opcodeNumberType {
	switch t {
	case OPCODE_IADD, OPCODE_IMAD, OPCODE_IMAX, OPCODE_IMIN, OPCODE_IMUL, OPCODE_INEG, OPCODE_ISHL, OPCODE_ISHR, OPCODE_11_IBFE, OPCODE_11_ATOMIC_IADD, OPCODE_11_ATOMIC_IMAX, OPCODE_11_ATOMIC_IMIN, OPCODE_11_IMM_ATOMIC_IADD, OPCODE_11_IMM_ATOMIC_IMAX, OPCODE_11_IMM_ATOMIC_IMIN, OPCODE_FTOI, OPCODE_RESINFO:
		return internalNumberTypeInt
	case OPCODE_IGE, OPCODE_ILT, OPCODE_INE, OPCODE_GE, OPCODE_LT, OPCODE_UGE, OPCODE_ULT, OPCODE_EQ, OPCODE_NE, OPCODE_IEQ, OPCODE_11_DEQ, OPCODE_11_DGE, OPCODE_11_DLT, OPCODE_11_DNE:
		return internalNumberTypeBool
	case OPCODE_11_UADDC, OPCODE_UMAD, OPCODE_UMAX, OPCODE_UMIN, OPCODE_UMUL, OPCODE_11_ATOMIC_UMAX, OPCODE_11_ATOMIC_UMIN, OPCODE_11_IMM_ATOMIC_UMAX, OPCODE_11_IMM_ATOMIC_UMIN, OPCODE_UDIV, OPCODE_USHR, OPCODE_11_UBFE, OPCODE_11_USUBB, OPCODE_FTOU, OPCODE_OR, OPCODE_11_ATOMIC_OR, OPCODE_AND, OPCODE_11_ATOMIC_AND, OPCODE_11_IMM_ATOMIC_AND:
		return internalNumberTypeUInt
	case OPCODE_ADD, OPCODE_DIV, OPCODE_DP2, OPCODE_DP3, OPCODE_DP4, OPCODE_EXP, OPCODE_FRC, OPCODE_LOG, OPCODE_MAD, OPCODE_MIN, OPCODE_MAX, OPCODE_MUL, OPCODE_ROUND_NE, OPCODE_ROUND_NI, OPCODE_ROUND_PI, OPCODE_ROUND_Z, OPCODE_RSQ, OPCODE_SQRT, OPCODE_SINCOS, OPCODE_11_F16TOF32, OPCODE_11_F32TOF16, OPCODE_11_DERIV_RTX_COARSE, OPCODE_11_DERIV_RTX_FINE, OPCODE_11_DERIV_RTY_COARSE, OPCODE_11_DERIV_RTY_FINE, OPCODE_DERIV_RTX, OPCODE_DERIV_RTY, OPCODE_MOV, OPCODE_MOVC, OPCODE_UTOF, OPCODE_ITOF, OPCODE_11_RCP:
		return internalNumberTypeFloat
	case OPCODE_11_DADD, OPCODE_11_DMAX, OPCODE_11_DMIN, OPCODE_11_DMUL, OPCODE_11_DMOV, OPCODE_11_DMOVC:
		return internalNumberTypeDouble
	default:
		return internalNumberTypeUnknown
	}
}

func (t ShaderOpcodeType) IsDeclaration() bool {
	switch t {
	case OPCODE_DCL_CONSTANT_BUFFER, OPCODE_DCL_GLOBAL_FLAGS, OPCODE_11_DCL_FUNCTION_BODY, OPCODE_11_DCL_FUNCTION_TABLE, OPCODE_11_DCL_GS_INSTANCE_COUNT, OPCODE_11_DCL_HS_FORK_PHASE_INSTANCE_COUNT, OPCODE_11_DCL_HS_JOIN_PHASE_INSTANCE_COUNT, OPCODE_11_DCL_HS_MAX_TESSFACTOR, OPCODE_11_DCL_INPUT_CONTROL_POINT_COUNT, OPCODE_11_DCL_INTERFACE, OPCODE_11_DCL_OUTPUT_CONTROL_POINT_COUNT, OPCODE_11_DCL_RESOURCE_RAW, OPCODE_11_DCL_RESOURCE_STRUCTURED, OPCODE_11_DCL_STREAM, OPCODE_11_DCL_TESS_DOMAIN, OPCODE_11_DCL_TESS_OUTPUT_PRIMITIVE, OPCODE_11_DCL_TESS_PARTITIONING, OPCODE_11_DCL_THREAD_GROUP, OPCODE_11_DCL_THREAD_GROUP_SHARED_MEMORY_RAW, OPCODE_11_DCL_THREAD_GROUP_SHARED_MEMORY_STRUCTURED, OPCODE_11_DCL_UNORDERED_ACCESS_VIEW_RAW, OPCODE_11_DCL_UNORDERED_ACCESS_VIEW_STRUCTURED, OPCODE_11_DCL_UNORDERED_ACCESS_VIEW_TYPED, OPCODE_DCL_GS_INPUT_PRIMITIVE, OPCODE_DCL_GS_OUTPUT_PRIMITIVE_TOPOLOGY, OPCODE_DCL_INDEXABLE_TEMP, OPCODE_DCL_INDEX_RANGE, OPCODE_DCL_INPUT, OPCODE_DCL_INPUT_PS, OPCODE_DCL_INPUT_PS_SGV, OPCODE_DCL_INPUT_PS_SIV, OPCODE_DCL_INPUT_SGV, OPCODE_DCL_INPUT_SIV, OPCODE_DCL_MAX_OUTPUT_VERTEX_COUNT, OPCODE_DCL_OUTPUT, OPCODE_DCL_OUTPUT_SGV, OPCODE_DCL_OUTPUT_SIV, OPCODE_DCL_RESOURCE, OPCODE_DCL_SAMPLER, OPCODE_DCL_TEMPS:
		return true
	default:
		return false
	}
}

func (t ShaderOpcodeType) ToString() string {
	switch t {
	case OPCODE_ADD:
		return "ADD"
	case OPCODE_AND:
		return "AND"
	case OPCODE_BREAK:
		return "BREAK"
	case OPCODE_BREAKC:
		return "BREAKC"
	case OPCODE_CALL:
		return "CALL"
	case OPCODE_CALLC:
		return "CALLC"
	case OPCODE_CASE:
		return "CASE"
	case OPCODE_CONTINUE:
		return "CONTINUE"
	case OPCODE_CONTINUEC:
		return "CONTINUEC"
	case OPCODE_CUT:
		return "CUT"
	case OPCODE_DEFAULT:
		return "DEFAULT"
	case OPCODE_DERIV_RTX:
		return "DERIV_RTX"
	case OPCODE_DERIV_RTY:
		return "DERIV_RTY"
	case OPCODE_DISCARD:
		return "DISCARD"
	case OPCODE_DIV:
		return "DIV"
	case OPCODE_DP2:
		return "DP2"
	case OPCODE_DP3:
		return "DP3"
	case OPCODE_DP4:
		return "DP4"
	case OPCODE_ELSE:
		return "ELSE"
	case OPCODE_EMIT:
		return "EMIT"
	case OPCODE_EMITTHENCUT:
		return "EMITTHENCUT"
	case OPCODE_ENDIF:
		return "ENDIF"
	case OPCODE_ENDLOOP:
		return "ENDLOOP"
	case OPCODE_ENDSWITCH:
		return "ENDSWITCH"
	case OPCODE_EQ:
		return "EQ"
	case OPCODE_EXP:
		return "EXP"
	case OPCODE_FRC:
		return "FRC"
	case OPCODE_FTOI:
		return "FTOI"
	case OPCODE_FTOU:
		return "FTOU"
	case OPCODE_GE:
		return "GE"
	case OPCODE_IADD:
		return "IADD"
	case OPCODE_IF:
		return "IF"
	case OPCODE_IEQ:
		return "IEQ"
	case OPCODE_IGE:
		return "IGE"
	case OPCODE_ILT:
		return "ILT"
	case OPCODE_IMAD:
		return "IMAD"
	case OPCODE_IMAX:
		return "IMAX"
	case OPCODE_IMIN:
		return "IMIN"
	case OPCODE_IMUL:
		return "IMUL"
	case OPCODE_INE:
		return "INE"
	case OPCODE_INEG:
		return "INEG"
	case OPCODE_ISHL:
		return "ISHL"
	case OPCODE_ISHR:
		return "ISHR"
	case OPCODE_ITOF:
		return "ITOF"
	case OPCODE_LABEL:
		return "LABEL"
	case OPCODE_LD:
		return "LD"
	case OPCODE_LD_MS:
		return "LD_MS"
	case OPCODE_LOG:
		return "LOG"
	case OPCODE_LOOP:
		return "LOOP"
	case OPCODE_LT:
		return "LT"
	case OPCODE_MAD:
		return "MAD"
	case OPCODE_MIN:
		return "MIN"
	case OPCODE_MAX:
		return "MAX"
	case OPCODE_CUSTOMDATA:
		return "CUSTOMDATA"
	case OPCODE_MOV:
		return "MOV"
	case OPCODE_MOVC:
		return "MOVC"
	case OPCODE_MUL:
		return "MUL"
	case OPCODE_NE:
		return "NE"
	case OPCODE_NOP:
		return "NOP"
	case OPCODE_NOT:
		return "NOT"
	case OPCODE_OR:
		return "OR"
	case OPCODE_RESINFO:
		return "RESINFO"
	case OPCODE_RET:
		return "RET"
	case OPCODE_RETC:
		return "RETC"
	case OPCODE_ROUND_NE:
		return "ROUND_NE"
	case OPCODE_ROUND_NI:
		return "ROUND_NI"
	case OPCODE_ROUND_PI:
		return "ROUND_PI"
	case OPCODE_ROUND_Z:
		return "ROUND_Z"
	case OPCODE_RSQ:
		return "RSQ"
	case OPCODE_SAMPLE:
		return "SAMPLE"
	case OPCODE_SAMPLE_C:
		return "SAMPLE_C"
	case OPCODE_SAMPLE_C_LZ:
		return "SAMPLE_C_LZ"
	case OPCODE_SAMPLE_L:
		return "SAMPLE_L"
	case OPCODE_SAMPLE_D:
		return "SAMPLE_D"
	case OPCODE_SAMPLE_B:
		return "SAMPLE_B"
	case OPCODE_SQRT:
		return "SQRT"
	case OPCODE_SWITCH:
		return "SWITCH"
	case OPCODE_SINCOS:
		return "SINCOS"
	case OPCODE_UDIV:
		return "UDIV"
	case OPCODE_ULT:
		return "ULT"
	case OPCODE_UGE:
		return "UGE"
	case OPCODE_UMUL:
		return "UMUL"
	case OPCODE_UMAD:
		return "UMAD"
	case OPCODE_UMAX:
		return "UMAX"
	case OPCODE_UMIN:
		return "UMIN"
	case OPCODE_USHR:
		return "USHR"
	case OPCODE_UTOF:
		return "UTOF"
	case OPCODE_XOR:
		return "XOR"
	case OPCODE_DCL_RESOURCE:
		return "DCL_RESOURCE"
	case OPCODE_DCL_CONSTANT_BUFFER:
		return "DCL_CONSTANT_BUFFER"
	case OPCODE_DCL_SAMPLER:
		return "DCL_SAMPLER"
	case OPCODE_DCL_INDEX_RANGE:
		return "DCL_INDEX_RANGE"
	case OPCODE_DCL_GS_OUTPUT_PRIMITIVE_TOPOLOGY:
		return "DCL_GS_OUTPUT_PRIMITIVE_TOPOLOGY"
	case OPCODE_DCL_GS_INPUT_PRIMITIVE:
		return "DCL_GS_INPUT_PRIMITIVE"
	case OPCODE_DCL_MAX_OUTPUT_VERTEX_COUNT:
		return "DCL_MAX_OUTPUT_VERTEX_COUNT"
	case OPCODE_DCL_INPUT:
		return "DCL_INPUT"
	case OPCODE_DCL_INPUT_SGV:
		return "DCL_INPUT_SGV"
	case OPCODE_DCL_INPUT_SIV:
		return "DCL_INPUT_SIV"
	case OPCODE_DCL_INPUT_PS:
		return "DCL_INPUT_PS"
	case OPCODE_DCL_INPUT_PS_SGV:
		return "DCL_INPUT_PS_SGV"
	case OPCODE_DCL_INPUT_PS_SIV:
		return "DCL_INPUT_PS_SIV"
	case OPCODE_DCL_OUTPUT:
		return "DCL_OUTPUT"
	case OPCODE_DCL_OUTPUT_SGV:
		return "DCL_OUTPUT_SGV"
	case OPCODE_DCL_OUTPUT_SIV:
		return "DCL_OUTPUT_SIV"
	case OPCODE_DCL_TEMPS:
		return "DCL_TEMPS"
	case OPCODE_DCL_INDEXABLE_TEMP:
		return "DCL_INDEXABLE_TEMP"
	case OPCODE_DCL_GLOBAL_FLAGS:
		return "DCL_GLOBAL_FLAGS"
	case D3D10_SB_OPCODE_RESERVED0:
		return "B_OPCODE_RESERVED0"
	case OPCODE_10_1_LOD:
		return "LOD"
	case OPCODE_10_1_GATHER4:
		return "GATHER4"
	case OPCODE_10_1_SAMPLE_POS:
		return "SAMPLE_POS"
	case OPCODE_10_1_SAMPLE_INFO:
		return "SAMPLE_INFO"
	case D3D10_1_SB_OPCODE_RESERVED1:
		return "D3D10_1_SB_OPCODE_RESERVED1"
	case OPCODE_11_HS_DECLS:
		return "HS_DECLS"
	case OPCODE_11_HS_CONTROL_POINT_PHASE:
		return "HS_CONTROL_POINT_PHASE"
	case OPCODE_11_HS_FORK_PHASE:
		return "HS_FORK_PHASE"
	case OPCODE_11_HS_JOIN_PHASE:
		return "HS_JOIN_PHASE"
	case OPCODE_11_EMIT_STREAM:
		return "EMIT_STREAM"
	case OPCODE_11_CUT_STREAM:
		return "CUT_STREAM"
	case OPCODE_11_EMITTHENCUT_STREAM:
		return "EMITTHENCUT_STREAM"
	case OPCODE_11_INTERFACE_CALL:
		return "INTERFACE_CALL"
	case OPCODE_11_BUFINFO:
		return "BUFINFO"
	case OPCODE_11_DERIV_RTX_COARSE:
		return "DERIV_RTX_COARSE"
	case OPCODE_11_DERIV_RTX_FINE:
		return "DERIV_RTX_FINE"
	case OPCODE_11_DERIV_RTY_COARSE:
		return "DERIV_RTY_COARSE"
	case OPCODE_11_DERIV_RTY_FINE:
		return "DERIV_RTY_FINE"
	case OPCODE_11_GATHER4_C:
		return "GATHER4_C"
	case OPCODE_11_GATHER4_PO:
		return "GATHER4_PO"
	case OPCODE_11_GATHER4_PO_C:
		return "GATHER4_PO_C"
	case OPCODE_11_RCP:
		return "RCP"
	case OPCODE_11_F32TOF16:
		return "F32TOF16"
	case OPCODE_11_F16TOF32:
		return "F16TOF32"
	case OPCODE_11_UADDC:
		return "UADDC"
	case OPCODE_11_USUBB:
		return "USUBB"
	case OPCODE_11_COUNTBITS:
		return "COUNTBITS"
	case OPCODE_11_FIRSTBIT_HI:
		return "FIRSTBIT_HI"
	case OPCODE_11_FIRSTBIT_LO:
		return "FIRSTBIT_LO"
	case OPCODE_11_FIRSTBIT_SHI:
		return "FIRSTBIT_SHI"
	case OPCODE_11_UBFE:
		return "UBFE"
	case OPCODE_11_IBFE:
		return "IBFE"
	case OPCODE_11_BFI:
		return "BFI"
	case OPCODE_11_BFREV:
		return "BFREV"
	case OPCODE_11_SWAPC:
		return "SWAPC"
	case OPCODE_11_DCL_STREAM:
		return "DCL_STREAM"
	case OPCODE_11_DCL_FUNCTION_BODY:
		return "DCL_FUNCTION_BODY"
	case OPCODE_11_DCL_FUNCTION_TABLE:
		return "DCL_FUNCTION_TABLE"
	case OPCODE_11_DCL_INTERFACE:
		return "DCL_INTERFACE"
	case OPCODE_11_DCL_INPUT_CONTROL_POINT_COUNT:
		return "DCL_INPUT_CONTROL_POINT_COUNT"
	case OPCODE_11_DCL_OUTPUT_CONTROL_POINT_COUNT:
		return "DCL_OUTPUT_CONTROL_POINT_COUNT"
	case OPCODE_11_DCL_TESS_DOMAIN:
		return "DCL_TESS_DOMAIN"
	case OPCODE_11_DCL_TESS_PARTITIONING:
		return "DCL_TESS_PARTITIONING"
	case OPCODE_11_DCL_TESS_OUTPUT_PRIMITIVE:
		return "DCL_TESS_OUTPUT_PRIMITIVE"
	case OPCODE_11_DCL_HS_MAX_TESSFACTOR:
		return "DCL_HS_MAX_TESSFACTOR"
	case OPCODE_11_DCL_HS_FORK_PHASE_INSTANCE_COUNT:
		return "DCL_HS_FORK_PHASE_INSTANCE_COUNT"
	case OPCODE_11_DCL_HS_JOIN_PHASE_INSTANCE_COUNT:
		return "DCL_HS_JOIN_PHASE_INSTANCE_COUNT"
	case OPCODE_11_DCL_THREAD_GROUP:
		return "DCL_THREAD_GROUP"
	case OPCODE_11_DCL_UNORDERED_ACCESS_VIEW_TYPED:
		return "DCL_UNORDERED_ACCESS_VIEW_TYPED"
	case OPCODE_11_DCL_UNORDERED_ACCESS_VIEW_RAW:
		return "DCL_UNORDERED_ACCESS_VIEW_RAW"
	case OPCODE_11_DCL_UNORDERED_ACCESS_VIEW_STRUCTURED:
		return "DCL_UNORDERED_ACCESS_VIEW_STRUCTURED"
	case OPCODE_11_DCL_THREAD_GROUP_SHARED_MEMORY_RAW:
		return "DCL_THREAD_GROUP_SHARED_MEMORY_RAW"
	case OPCODE_11_DCL_THREAD_GROUP_SHARED_MEMORY_STRUCTURED:
		return "DCL_THREAD_GROUP_SHARED_MEMORY_STRUCTURED"
	case OPCODE_11_DCL_RESOURCE_RAW:
		return "DCL_RESOURCE_RAW"
	case OPCODE_11_DCL_RESOURCE_STRUCTURED:
		return "DCL_RESOURCE_STRUCTURED"
	case OPCODE_11_LD_UAV_TYPED:
		return "LD_UAV_TYPED"
	case OPCODE_11_STORE_UAV_TYPED:
		return "STORE_UAV_TYPED"
	case OPCODE_11_LD_RAW:
		return "LD_RAW"
	case OPCODE_11_STORE_RAW:
		return "STORE_RAW"
	case OPCODE_11_LD_STRUCTURED:
		return "LD_STRUCTURED"
	case OPCODE_11_STORE_STRUCTURED:
		return "STORE_STRUCTURED"
	case OPCODE_11_ATOMIC_AND:
		return "ATOMIC_AND"
	case OPCODE_11_ATOMIC_OR:
		return "ATOMIC_OR"
	case OPCODE_11_ATOMIC_XOR:
		return "ATOMIC_XOR"
	case OPCODE_11_ATOMIC_CMP_STORE:
		return "ATOMIC_CMP_STORE"
	case OPCODE_11_ATOMIC_IADD:
		return "ATOMIC_IADD"
	case OPCODE_11_ATOMIC_IMAX:
		return "ATOMIC_IMAX"
	case OPCODE_11_ATOMIC_IMIN:
		return "ATOMIC_IMIN"
	case OPCODE_11_ATOMIC_UMAX:
		return "ATOMIC_UMAX"
	case OPCODE_11_ATOMIC_UMIN:
		return "ATOMIC_UMIN"
	case OPCODE_11_IMM_ATOMIC_ALLOC:
		return "IMM_ATOMIC_ALLOC"
	case OPCODE_11_IMM_ATOMIC_CONSUME:
		return "IMM_ATOMIC_CONSUME"
	case OPCODE_11_IMM_ATOMIC_IADD:
		return "IMM_ATOMIC_IADD"
	case OPCODE_11_IMM_ATOMIC_AND:
		return "IMM_ATOMIC_AND"
	case OPCODE_11_IMM_ATOMIC_OR:
		return "IMM_ATOMIC_OR"
	case OPCODE_11_IMM_ATOMIC_XOR:
		return "IMM_ATOMIC_XOR"
	case OPCODE_11_IMM_ATOMIC_EXCH:
		return "IMM_ATOMIC_EXCH"
	case OPCODE_11_IMM_ATOMIC_CMP_EXCH:
		return "IMM_ATOMIC_CMP_EXCH"
	case OPCODE_11_IMM_ATOMIC_IMAX:
		return "IMM_ATOMIC_IMAX"
	case OPCODE_11_IMM_ATOMIC_IMIN:
		return "IMM_ATOMIC_IMIN"
	case OPCODE_11_IMM_ATOMIC_UMAX:
		return "IMM_ATOMIC_UMAX"
	case OPCODE_11_IMM_ATOMIC_UMIN:
		return "IMM_ATOMIC_UMIN"
	case OPCODE_11_SYNC:
		return "SYNC"
	case OPCODE_11_DADD:
		return "DADD"
	case OPCODE_11_DMAX:
		return "DMAX"
	case OPCODE_11_DMIN:
		return "DMIN"
	case OPCODE_11_DMUL:
		return "DMUL"
	case OPCODE_11_DEQ:
		return "DEQ"
	case OPCODE_11_DGE:
		return "DGE"
	case OPCODE_11_DLT:
		return "DLT"
	case OPCODE_11_DNE:
		return "DNE"
	case OPCODE_11_DMOV:
		return "DMOV"
	case OPCODE_11_DMOVC:
		return "DMOVC"
	case OPCODE_11_DTOF:
		return "DTOF"
	case OPCODE_11_FTOD:
		return "FTOD"
	case OPCODE_11_EVAL_SNAPPED:
		return "EVAL_SNAPPED"
	case OPCODE_11_EVAL_SAMPLE_INDEX:
		return "EVAL_SAMPLE_INDEX"
	case OPCODE_11_EVAL_CENTROID:
		return "EVAL_CENTROID"
	case OPCODE_11_DCL_GS_INSTANCE_COUNT:
		return "DCL_GS_INSTANCE_COUNT"
	case OPCODE_11_ABORT:
		return "ABORT"
	case OPCODE_11_DEBUG_BREAK:
		return "DEBUG_BREAK"
	case D3D11_SB_OPCODE_RESERVED0:
		return "B_OPCODE_RESERVED0"
	case OPCODE_11_1_DDIV:
		return "DDIV"
	case OPCODE_11_1_DFMA:
		return "DFMA"
	case OPCODE_11_1_DRCP:
		return "DRCP"
	case OPCODE_11_1_MSAD:
		return "MSAD"
	case OPCODE_11_1_DTOI:
		return "DTOI"
	case OPCODE_11_1_DTOU:
		return "DTOU"
	case OPCODE_11_1_ITOD:
		return "ITOD"
	case OPCODE_11_1_UTOD:
		return "UTOD"
	case D3D11_1_SB_OPCODE_RESERVED0:
		return "D3D11_1_SB_OPCODE_RESERVED0"
	case D3DWDDM1_3_SB_OPCODE_GATHER4_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_GATHER4_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_GATHER4_C_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_GATHER4_C_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_GATHER4_PO_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_GATHER4_PO_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_GATHER4_PO_C_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_GATHER4_PO_C_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_LD_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_LD_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_LD_MS_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_LD_MS_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_LD_UAV_TYPED_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_LD_UAV_TYPED_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_LD_RAW_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_LD_RAW_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_LD_STRUCTURED_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_LD_STRUCTURED_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_SAMPLE_L_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_SAMPLE_L_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_SAMPLE_C_LZ_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_SAMPLE_C_LZ_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_SAMPLE_CLAMP_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_SAMPLE_CLAMP_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_SAMPLE_B_CLAMP_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_SAMPLE_B_CLAMP_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_SAMPLE_D_CLAMP_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_SAMPLE_D_CLAMP_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_SAMPLE_C_CLAMP_FEEDBACK:
		return "D3DWDDM1_3_SB_OPCODE_SAMPLE_C_CLAMP_FEEDBACK"
	case D3DWDDM1_3_SB_OPCODE_CHECK_ACCESS_FULLY_MAPPED:
		return "D3DWDDM1_3_SB_OPCODE_CHECK_ACCESS_FULLY_MAPPED"
	case D3DWDDM1_3_SB_OPCODE_RESERVED0:
		return "D3DWDDM1_3_SB_OPCODE_RESERVED0"
	case D3D10_SB_NUM_OPCODES:
		return "D3D10_SB_NUM_OPCODES"
	default:
		return "Unknown opcode"
	}
}

func (t ShaderOpcodeType) ToOperator() string {
	switch t {
	case OPCODE_ADD, OPCODE_IADD, OPCODE_11_UADDC, OPCODE_11_ATOMIC_IADD, OPCODE_11_IMM_ATOMIC_IADD:
		return "+"
	case OPCODE_MUL, OPCODE_IMUL, OPCODE_UMUL, OPCODE_11_DMUL:
		return "*"
	case OPCODE_DIV, OPCODE_UDIV, OPCODE_11_1_DDIV:
		return "/"
	case OPCODE_LT, OPCODE_ILT, OPCODE_ULT, OPCODE_11_DLT:
		return "<"
	case OPCODE_GE, OPCODE_IGE, OPCODE_UGE, OPCODE_11_DGE:
		return ">="
	case OPCODE_OR, OPCODE_11_ATOMIC_OR, OPCODE_11_IMM_ATOMIC_OR:
		return "|"
	case OPCODE_AND, OPCODE_11_ATOMIC_AND, OPCODE_11_IMM_ATOMIC_AND:
		return "&"
	case OPCODE_ISHL:
		return "<<"
	case OPCODE_USHR, OPCODE_ISHR:
		return ">>"
	case OPCODE_NE, OPCODE_INE:
		return "!="
	case OPCODE_EQ, OPCODE_IEQ:
		return "=="
	default:
		panic(fmt.Sprintf("operator not known for opcode %v", t.ToString()))
	}
}

const (
	LENGTH_MASK  uint32 = 0x7f000000
	LENGTH_SHIFT        = 24
)

const TYPE_MASK uint32 = 0x000007ff

const (
	CUSTOMDATA_MASK  uint32 = 0xfffff800
	CUSTOMDATA_SHIFT        = 11
)

const EXTENDED_MASK uint32 = 0x80000000

func IsExtended(opcode uint32) bool {
	return (opcode & EXTENDED_MASK) != 0
}

type UnimplementedOpcode struct {
	opcode uint32
	data   []uint8
}

func (op *UnimplementedOpcode) ToGLSL(_ []ConstantBuffer) string {
	opType := ShaderOpcodeType(op.opcode & TYPE_MASK)
	toReturn := opType.ToString()
	toReturn += fmt.Sprintf(" %032s", strconv.FormatUint(uint64((op.opcode & ^TYPE_MASK) & ^LENGTH_MASK), 2))
	for _, val := range op.data {
		toReturn += fmt.Sprintf(" %02x", val)
	}
	return toReturn + "\n"
}

func ParseOpcode(r io.Reader) (Opcode, error) {
	var token uint32
	if err := binary.Read(r, binary.LittleEndian, &token); err != nil {
		if err == io.EOF {
			return nil, err
		}
		return nil, fmt.Errorf("reading start token: %v", err)
	}
	var data []uint8
	opType := ShaderOpcodeType(token & TYPE_MASK)
	// fmt.Printf("Parsing opcode %v\n", opType.ToString())
	if opType == OPCODE_CUSTOMDATA {
		customClass := ShaderOpcodeCustomDataClass((token & CUSTOMDATA_MASK) >> CUSTOMDATA_SHIFT)
		var dwordCount uint32
		if err := binary.Read(r, binary.LittleEndian, &dwordCount); err != nil {
			return nil, fmt.Errorf("reading dword count: %v", err)
		}
		// We've read 2 of the dwords in this customdata opcode already, so now
		// we just need a buffer big enough for the last set of bytes
		data = make([]uint8, (dwordCount-2)*4)
		if err := binary.Read(r, binary.LittleEndian, &data); err != nil {
			return nil, fmt.Errorf("reading data: %v", err)
		}
		return ParseCustomData(customClass, data)
	}
	length := (token & LENGTH_MASK) >> LENGTH_SHIFT
	if length > 1 {
		data = make([]uint8, (length-1)*4)
		if err := binary.Read(r, binary.LittleEndian, &data); err != nil {
			return nil, fmt.Errorf("reading data: %v", err)
		}
	}
	if opType.IsDeclaration() {
		return ParseDeclaration(token, data)
	}

	return ParseInstruction(token, data)
}
